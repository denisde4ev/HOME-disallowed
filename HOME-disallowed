#!/bin/sh
set -eu

# TODO: rename allowlist to whitelist. and add blacklist for files to be autoremoved.


unset from_stdin homepath arg_edit allowed_read

while case $# in 0) false; esac; do
	case $1 in
		--) shift; break;;

		help|--help)
			printf %s\\n \
				"Usage: ${0##*/} --homepath <PATH> [--allowed-filter FILTER_FILE] [-] [ll|ls|rm|cat] [...args]" \
				"       ${0##*/} <edit|--edit> [...editor args]" \
				"options:" \
				"  -           read from stdin files to rm/ls from homedir" \
				"  ll|ls       calls '\$1 \$@ -- DISALLOWED_FILES', (default: ll)" \
				"  rm          calls 'rm \${@:-\"-riv\"} -- DISALLOWED_FILES'" \
				"  cat         just prints disallowed files, (default if stdout is not tty)" \
				"  edit        edit allowlist" \
				"  [--]help    prints usage and exit" \
				"" \
				"Print/remove not allowed files in your homedir" \
				"And print curent staus of directoryes + files" \
			;
			exit
		;;
		# -x) set -x; shift;;
		--edit|edit) arg_edit='';;
		-) from_stdin='';;

		# options requiring argument:
		--homepath)   homepath=$2; shift;;
		--homepath=*) homepath=${1#*=};;
		--allowed-filter)   allowed_read=$2; shift;;
		--allowed-filter=*) allowed_read=${1#*=};;

		ll|ls|rm|cat) action=$1; shift; break;;

		*) printf %s\\n >&2 "err in option: \$1=$1, use --help for usage"; exit 2;;
	esac
	shift
done


: "${allowed_read=$0.allowlist}"


case ${arg_edit+x} in x)
	set -f
	exec ${EDITOR:-vi} "$@" "$allowed_read"
	exit
esac


: "${homepath?"missing on empty --homepath option"}"
# dont: dont fallback to $HOME or ~
# reason:
#   user may want to remove write protected files from its own dir,
#   resulting in `sudo HOME-disallowed rm -rf`
#   and if no '--homepath' option spacifyed, then fallback $HOME -> /root
#   then will remove files from /root folder
# easy fix will be to detect if

cd "$homepath" || exit


case ${action+x} in '')
	if [ -t 1 ]; then
		action=ll
	else
		action=cat
	fi
esac

case ${from_stdin+stdin}:$action in
	stdin:*|?:cat) unset print_total;;
	*) print_total='';;
esac


[ -f "$allowed_read" ] || {
	printf %s\\n >&2 \
		"File allowed filter does not exist," \
		"use '${0##*/} edit' and save to create it" \
	;
	exit 1
}



{
	case ${from_stdin+stdin} in
	stdin)
		cat
		;;
	*)
		printf_existing_files() {
			if [ -e "$1" ]; then
				printf %s\\n "$@"
			fi
		}


		{
			printf_existing_files .[!.]*
			printf_existing_files *
		} | {
			grep -vxFf "$allowed_read"
		}
		;;
	esac
} | {
	case $action in
		cat) cat;;
		ll) xargs    -d \\n -r ${LSLONG_COMMAND:-ls -al} -d "$@" --;;
		ls) xargs    -d \\n -r ls -d "$@" --;;
		rm)    xargs -o -d \\n -r rm "${@:-"-riv"}" --;;
	esac
}



${print_total-exit 0}

len_existing() {
	[ -e "$1" ] || shift
	echo $#
}


total_hidden=$(len_existing .[!.]*)
dirs_hidden=$(len_existing .[!.]*/)
total=$(len_existing *)
dirs=$(len_existing */)

printf %s\\n >&2 \
	'' \
	"hidden: $(( total_hidden - dirs_hidden )) files + $dirs_hidden dirs = $total_hidden" \
	"shown:  $(( total - dirs )) files + $dirs dirs = $total" \
	"total: $(( total + total_hidden ))" \
;
